# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.

  # The following are additional checks from https://dart.dev/tools/linter-rules
  rules:
    - always_declare_return_types
    - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_dynamic_calls
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_implementing_value_types
    - avoid_js_rounded_ints
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_on_closure_parameters
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - cancel_subscriptions
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - close_sinks
    - combinators_ordering
    - comment_references
    - conditional_uri_does_not_exist
    - deprecated_consistency
    - deprecated_member_use_from_same_package
    - directives_ordering
    - discarded_futures
    - do_not_use_environment
    - eol_at_end_of_file
    - flutter_style_todos
    - join_return_with_assignment
    - library_names
    - literal_only_boolean_expressions
    - matching_super_parameters
    - missing_code_block_language_in_doc_comment
    - no_adjacent_strings_in_list
    - no_literal_bool_comparisons
    - no_runtimeType_toString
    - no_self_assignments
    - noop_primitive_operations
    - omit_local_variable_types
    - only_throw_errors
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_const_constructors
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_expression_function_bodies
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_foreach
    - prefer_if_elements_to_conditional_expressions
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_single_quotes
    - prefer_void_to_null
    - sized_box_shrink_expand
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_breaks
    - unnecessary_lambdas
    - unnecessary_library_directive
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unreachable_from_main
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_named_constants
    - use_raw_strings
    - use_setters_to_change_properties
    - use_string_buffers
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - invalid_runtime_check_with_js_interop_types
    - unnecessary_library_name
    - strict_top_level_inference
    - unnecessary_underscores
    - use_truncating_division
    - always_put_control_body_on_new_line
    - prefer_relative_imports
    - avoid_final_parameters #only because 'parameter_assignments' is on
    - document_ignores
    - missing_whitespace_between_adjacent_strings
    - one_member_abstracts
    - unnecessary_ignore
    - use_null_aware_elements
#experimental
    - annotate_redeclares
    - avoid_futureor_void
    - invalid_case_patterns
    - omit_obvious_local_variable_types
    - unnecessary_null_checks
    - use_late_for_private_fields_and_variables
    - implicit_reopen
    - no_default_cases
    - specify_nonobvious_property_types
    - unsafe_variance



analyzer:
  # Additional information about this file can be found at
  # https://dart.dev/guides/language/analysis-options

  errors:
    unnecessary_this: ignore
  plugins:
    - custom_lint
    # - drift more than one plugins not allowed
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  exclude:
    - "**/*.g.dart"
    - "**/*.drift.dart"
    
formatter:
  page_width: 100
  trailing_commas: preserve