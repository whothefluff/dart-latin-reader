import 'package:latin_reader/src/component/library/use_case/entity/view_author.dart';
import 'package:latin_reader/src/component/library/use_case/entity/view_work_details.dart';
import 'package:latin_reader/src/component/library/use_case/entity/view_work_contents_element.dart';

CREATE TABLE "DataVersion" (
    "idx" INTEGER NOT NULL,
    "createdAt" TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY( idx )
) 
-- STRICT
;

CREATE TABLE "MorphologicalDetails"(
    "form" TEXT NOT NULL,
    "item" INTEGER NOT NULL CHECK( item >= 0 ),
    "dictionaryRef" TEXT NOT NULL,
    PRIMARY KEY( form, item )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "MorphologicalDetailInflections"(
    "form" TEXT NOT NULL,
    "item" INTEGER NOT NULL,
    "cnt" INTEGER NOT NULL CHECK( cnt >= 0 ),
    "term" TEXT NOT NULL,
    "partOfSpeech" TEXT NOT NULL,
    "stem" TEXT NOT NULL,
    "suffix" TEXT NOT NULL,
    "gender" TEXT,
    "number" TEXT,
    "declension" TEXT,
    "gramm_case" TEXT,
    "mood" TEXT,
    "tense" TEXT,
    "voice" TEXT,
    "person" TEXT,
    PRIMARY KEY( form, item, cnt ),
    FOREIGN KEY( form, item ) REFERENCES MorphologicalDetails( form, item )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "Macronizations"(
    "form" TEXT NOT NULL,
    "syllableNumber" INTEGER NOT NULL CHECK( syllableNumber >= 0 ),
    "macronizedSyllable" TEXT NOT NULL,
    "isUncertain" INTEGER NOT NULL CHECK( isUncertain IN (0,1) ),
    PRIMARY KEY( form, syllableNumber )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "Authors"(
    "id" TEXT NOT NULL CHECK( id LIKE '________-____-____-____-____________' ),
    "name" TEXT NOT NULL,
    "about" TEXT NOT NULL,
    --TODO: add check with length range so that it always looks ok from the page
    "image" BLOB NOT NULL,
    PRIMARY KEY( id )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "AuthorAbbreviations"(
    "authorId" TEXT NOT NULL,
    "id" INTEGER NOT NULL CHECK( id >= 0 ),
    "val" TEXT NOT NULL,
    PRIMARY KEY( authorId, id ),
    FOREIGN KEY( authorId ) REFERENCES Authors( id  )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "Works"(
    "id" TEXT NOT NULL CHECK( id LIKE '________-____-____-____-____________' ),
    "name" TEXT NOT NULL,
    "about" TEXT NOT NULL,
    PRIMARY KEY( id )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "WorkAbbreviations"(
    "workId" TEXT NOT NULL,
    "id" INTEGER NOT NULL CHECK( id >= 0 ),
    "val" TEXT NOT NULL,
    PRIMARY KEY( workId, id ),
    FOREIGN KEY( workId ) REFERENCES Works( id )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "WorkContents"(
    "workId" TEXT NOT NULL,
    "idx" INTEGER NOT NULL CHECK( idx >= 0 ),
    "word" TEXT NOT NULL,
    "sourceReference" TEXT NOT NULL,
    PRIMARY KEY( workId, idx ),
    FOREIGN KEY( workId ) REFERENCES Works( id )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "UserProvidedMacronizations"(
    "workId" TEXT NOT NULL,
    "idx" INTEGER NOT NULL,
    "syllableNumber" INTEGER NOT NULL,
    "macronizedSyllable" TEXT NOT NULL,
    PRIMARY KEY( workId, idx, syllableNumber ),
    FOREIGN KEY( workId, idx ) REFERENCES WorkContents( workId, idx )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "WorkContentSubdivisions"(
    "workId" TEXT NOT NULL,
    "node" TEXT NOT NULL CHECK( node LIKE '________-____-____-____-____________' ),
    "typ" TEXT NOT NULL CHECK( typ IN ('VERS','BOOK','POEM','PROL','EPIL','TITL','PARA') ),
    --add more as needed
    "cnt" INTEGER NOT NULL CHECK( cnt >= 0 ),
    "name" TEXT NOT NULL,
    "parent" TEXT CHECK( parent IS NULL OR parent LIKE '________-____-____-____-____________' ),
    "fromIndex" INTEGER NOT NULL CHECK( fromIndex >= 0 ),
    "toIndex" INTEGER NOT NULL CHECK( toIndex >= 0 ),
    PRIMARY KEY( workId, node ),
    FOREIGN KEY( workId, fromIndex ) REFERENCES WorkContents( workId, idx ),
    FOREIGN KEY( workId, toIndex ) REFERENCES WorkContents( workId, idx )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "WorkContentSupplementary"(
    "workId" TEXT NOT NULL,
    "typ" TEXT NOT NULL CHECK( typ IN ('NOTE','GAP','ABBR') ),
    "cnt" INTEGER NOT NULL CHECK( cnt >= 0 ),
    "fromIndex" INTEGER NOT NULL,
    "toIndex" INTEGER NOT NULL,
    "val" TEXT NOT NULL,
    PRIMARY KEY( workId, typ, cnt ),
    FOREIGN KEY( workId ) REFERENCES Works( id )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE TABLE "AuthorsAndWorks"(
    "authorId" TEXT NOT NULL,
    "workId" TEXT NOT NULL,
    PRIMARY KEY( authorId, workId ),
    FOREIGN KEY( authorId ) REFERENCES Authors( id ),
    FOREIGN KEY( workId ) REFERENCES Works( id )
) 
-- STRICT, 
WITHOUT ROWID;

CREATE VIEW "WorkContentSubdivisionsHierarchy" AS 
    WITH RECURSIVE Subsets AS ( SELECT *,
                                       0 AS depth
                                    FROM WorkContentSubdivisions
                                    WHERE parent IS NULL
                                UNION ALL
                                -- Recursively find descendants until reaching leaf nodes
                                SELECT s.*,
                                       Subsets.depth + 1
                                    FROM WorkContentSubdivisions AS s
                                    INNER JOIN Subsets 
                                        ON s.parent = Subsets.node )
        SELECT *
            FROM Subsets
            ORDER BY fromindex, depth, toindex;

CREATE VIEW "LatestDataVersion" AS
    SELECT *
        FROM DataVersion
        ORDER BY idx DESC
        LIMIT 1;

CREATE VIEW "LibraryAuthors" AS
    SELECT Authors.id,
           Authors.name,
           Authors.about,
           Authors.image,
           COUNT(*) OVER( PARTITION BY AuthorsAndWorks.workId ) AS numberOfWorks
        FROM Authors
        LEFT JOIN AuthorsAndWorks
            ON Authors.id = AuthorsAndWorks.authorId;

getLibraryAuthors WITH AuthorView: SELECT * FROM LibraryAuthors;

CREATE VIEW "LibraryAuthorDetails" AS 
    WITH Aux AS ( SELECT Authors.id,
                         Authors.name,
                         Authors.about,
                         Authors.image,
                         AuthorsAndWorks.workId,
                         Works.name AS workName
                      FROM Authors
                      INNER JOIN AuthorsAndWorks
                          ON Authors.id = AuthorsAndWorks.authorId
                      INNER JOIN Works
                          ON AuthorsAndWorks.workId = Works.id ),
         WorksContents AS ( SELECT WorkContents.workId,
                                   COUNT(*) AS numberOfWords
                                FROM Aux
                                INNER JOIN WorkContents
                                    ON Aux.workId = WorkContents.workId
                                WHERE WorkContents.word NOT IN ('!','"','(', ')',',','.',':','?','-')
                                GROUP BY WorkContents.workId )
        SELECT Aux.*,
               WorksContents.numberOfWords
            FROM Aux
            INNER JOIN WorksContents
                ON Aux.workId = WorksContents.workId;

getLibraryAuthorDetails: SELECT * FROM LibraryAuthorDetails WHERE id = ?;

CREATE VIEW "LibraryWorkDetails" AS 
    WITH Aux AS ( SELECT id,
                         name,
                         about
                      FROM Works ),
         WorksContents AS ( SELECT WorkContents.workId,
                                   COUNT(*) AS numberOfWords
                                FROM Aux
                                INNER JOIN WorkContents 
                                    ON Aux.id = WorkContents.workId
                                WHERE word NOT IN ('!','"','(',')',',','.',':','?','-')
                                GROUP BY WorkContents.workId )
        SELECT Aux.*,
               WorksContents.numberOfWords,
               AuthorsAndWorks.authorId,
               Authors.name AS authorName
            FROM Aux
            INNER JOIN WorksContents
                ON Aux.id = WorksContents.workId
            LEFT OUTER JOIN AuthorsAndWorks
                ON Aux.id = AuthorsAndWorks.workId
            LEFT OUTER JOIN Authors 
                ON AuthorsAndWorks.authorId = Authors.id;

getLibraryWorkDetails WITH WorkDetailsView: SELECT * FROM LibraryWorkDetails WHERE id = ?;

CREATE VIEW "LibraryWorkContents" AS 
    WITH ClosestSubdivision AS ( SELECT WorkContents.workId,
                                        WorkContents.idx,
                                        WorkContents.word,
                                        WorkContents.sourceReference,
                                        SubdivsHierarchy.node,
                                        SubdivsHierarchy.typ,
                                        SubdivsHierarchy.parent,
                                        SubdivsHierarchy.depth,
                                        ROW_NUMBER( ) OVER( PARTITION BY WorkContents.workId, WorkContents.idx ORDER BY SubdivsHierarchy.fromIndex DESC ) AS rn
                                     FROM WorkContents
                                     INNER JOIN WorkContentSubdivisionsHierarchy AS SubdivsHierarchy 
                                         ON WorkContents.workId = SubdivsHierarchy.workId
                                            AND WorkContents.idx BETWEEN SubdivsHierarchy.fromIndex AND SubdivsHierarchy.toIndex
                                            AND SubdivsHierarchy.typ <> 'TITL' )
        SELECT workId AS id,
               parent,
               node,
               idx,
               word,
               typ,
               depth,
               sourceReference --( SELECT name FROM WorkContentSubdivisions AS aux WHERE aux.parent = ClosestSubdivision.parent AND aux.typ = 'TITL' LIMIT 1 ) AS title
            FROM ClosestSubdivision
            WHERE rn = 1
            ORDER BY idx;

getLibraryWorkContentsPartial WITH WorkContentsElementView: SELECT * FROM LibraryWorkContents WHERE id = ? AND idx BETWEEN ? AND ?;

CREATE VIEW "LibraryWorkIndexes" AS
    SELECT SubdivsHierarchy.parent,
           SubdivsHierarchy.node,
           SubdivsHierarchy.depth,
           SubdivsHierarchy.typ,
           SubdivsHierarchy.cnt,
           SubdivsHierarchy.fromIndex,
           SubdivsHierarchy.toIndex,
           Titles.name
        FROM WorkContentSubdivisionsHierarchy AS SubdivsHierarchy
        INNER JOIN WorkContentSubdivisionsHierarchy AS Titles
            ON SubdivsHierarchy.node = Titles.parent
               AND 'TITL' = Titles.typ
        ORDER BY SubdivsHierarchy.fromindex;