import 'package:latin_reader/src/component/dictionary/dictionaries_api.dart';
import 'package:latin_reader/src/component/dictionary/dictionary_entries_api.dart';

CREATE TABLE "Dictionaries" (
    "id" TEXT NOT NULL CHECK( id LIKE '________-____-____-____-____________' ),
    "name" TEXT NOT NULL,
    "language" TEXT NOT NULL,
    "publisher" TEXT NOT NULL,
    "publicationDate" TEXT NOT NULL,
    PRIMARY KEY( id )
)
STRICT,
WITHOUT ROWID;

CREATE TABLE "DictionaryEntries" (
    "dictionary" TEXT NOT NULL,
    "lemma" TEXT NOT NULL, --not primary key but should still used to join with DictEntrySenses
    "partOfSpeech" TEXT,
    "inflection" TEXT,
    "idx" INTEGER NOT NULL CHECK( idx >= 0 ),
    PRIMARY KEY( dictionary, idx ), -- idx is the order of the entry in the dictionary
    FOREIGN KEY( dictionary ) REFERENCES Dictionaries( id ),
    UNIQUE( lemma, dictionary ) --should create an index to filter dictionaries by lemma
)
STRICT,
WITHOUT ROWID;

CREATE TABLE "DictionaryAlphabets" (
    "dictionary" TEXT NOT NULL,
    "letter" TEXT NOT NULL,
    "firstEntryIndex" INTEGER NOT NULL,
    PRIMARY KEY( dictionary, letter ),
    FOREIGN KEY( dictionary, firstEntryIndex ) REFERENCES DictionaryEntries( dictionary, idx ),
    UNIQUE( dictionary, firstEntryIndex )
)
STRICT,
WITHOUT ROWID;

CREATE TABLE "DictEntrySenses" (
    "dictionary" TEXT NOT NULL,
    "lemma" TEXT NOT NULL,
    "lvl" TEXT NOT NULL CHECK( lvl REGEXP '^\d{3}(\.\d{3})*$' ),
    "prettyLevel" TEXT NOT NULL,
    "content" TEXT NOT NULL,
    PRIMARY KEY( dictionary, lemma, lvl ),
    FOREIGN KEY( lemma, dictionary ) REFERENCES DictionaryEntries( lemma, dictionary ) -- matches the modified foreign key
)
STRICT,
WITHOUT ROWID;

CREATE TABLE "DictEntrySenseQuotes" (
    "dictionary" TEXT NOT NULL,
    "lemma" TEXT NOT NULL,
    "lvl" TEXT NOT NULL,
    "seq" INTEGER NOT NULL CHECK( seq >= 0 ),
    "content" TEXT NOT NULL,
    "translation" TEXT,
    PRIMARY KEY( dictionary, lemma, lvl, seq ),
    FOREIGN KEY( dictionary, lemma, lvl ) REFERENCES DictEntrySenses( dictionary, lemma, lvl )
)
STRICT,
WITHOUT ROWID;

fillDictionaryAlphabets: INSERT INTO "DictionaryAlphabets" SELECT dictionary, UPPER( SUBSTR( lemma, 1, 1 ) ), MIN( idx ) FROM DictionaryEntries GROUP BY dictionary, UPPER( SUBSTR( lemma, 1, 1 ) );

CREATE VIEW "dictionary.Dictionaries" AS
    SELECT Dictionaries.*,
           COALESCE( DictionaryCounts.numberOfEntries, 0 ) AS numberOfEntries
        FROM Dictionaries
        LEFT OUTER JOIN ( SELECT dictionary, 
                                 COUNT(*) AS numberOfEntries 
                              FROM DictionaryEntries 
                              GROUP BY dictionary ) AS DictionaryCounts
            ON Dictionaries.id = DictionaryCounts.dictionary;

getDictionaries WITH Dictionary: SELECT id, name, language, publisher, CAST( publicationDate AS DATETIME ) AS publicationDate, numberOfEntries FROM "dictionary.Dictionaries";

CREATE VIEW "dictionary.DictionaryEntries" AS
    SELECT DictionaryEntries.*,
           COALESCE( SenseCounts.numberOfSenses, 0 ) AS numberOfSenses
        FROM DictionaryEntries
        LEFT OUTER JOIN ( SELECT dictionary, 
                                 lemma,
                                 COUNT(*) AS numberOfSenses 
                              FROM DictEntrySenses 
                              WHERE lvl BETWEEN '000' AND '999'
                              GROUP BY dictionary, lemma ) AS SenseCounts
            ON DictionaryEntries.dictionary = SenseCounts.dictionary
               AND DictionaryEntries.lemma = SenseCounts.lemma
        ORDER BY DictionaryEntries.dictionary, DictionaryEntries.idx;

getDictionaryEntries WITH Entry: SELECT * FROM "dictionary.DictionaryEntries" WHERE dictionary = ?;

getDictionaryAlphabetLetterPosition: SELECT firstEntryIndex FROM "DictionaryAlphabets" WHERE dictionary = ? AND letter = ? LIMIT 1;

-- CREATE VIRTUAL TABLE SearchableDictionaryEntries USING fts5(
--     lemma,
--     dictionary UNINDEXED
-- );

-- INSERT INTO SearchableDictionaryEntries 
--     SELECT lemma, 
--            dictionary 
--         FROM DictionaryEntries;

-- INSERT INTO SearchableDictionaryEntries( SearchableDictionaryEntries ) 
--     VALUES('optimize');

-- searchEntries: SELECT dictionary, lemma FROM SearchableDictionaryEntries(?);

-- searchDictionaryEntries:
--     SELECT DictionaryEntries.dictionary, 
--            DictionaryEntries.lemma
--         FROM SearchableDictionaryEntries(?)
--         INNER JOIN DictionaryEntries 
--             ON SearchableDictionaryEntries.lemma = DictionaryEntries.lemma 
--                AND SearchableDictionaryEntries.dictionary = DictionaryEntries.dictionary
--                AND DictionaryEntries.dictionary = ?;